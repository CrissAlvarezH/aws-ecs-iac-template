AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Default: "ecs-example"
    Description: "Project name"
    Type: String
    MinLength: "1"
    MaxLength: "100"
    AllowedPattern: ^[a-zA-Z][-a-zA-Z0-9]*

  CronExecutionExpression:
    Default: "*/2 * * * ? *"
    Description: "Cron execution expression"
    Type: String
    MinLength: "10"
    MaxLength: "30"

  SubnetIds:
    Description: "List of subnets" 
    Type: List<AWS::EC2::Subnet::Id>
    Default: "[]"

  EnvFileS3Arn:
    Description: "S3 arn of the env file"
    Type: String

Resources:

  ContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join [ "-", [ !Ref ProjectName, "repo" ] ]

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ "-", [ !Ref ProjectName, "cluster" ] ]

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join [ "-", [ !Ref ProjectName, "task-definition" ] ]
      Cpu: 1 vCPU
      Memory: 2 GB
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Image: !Join [ ":", [ !GetAtt ContainerRepository.RepositoryUri, "latest" ] ]
          Name: !Join [ "-", [ !Ref ProjectName, "ecs-container" ] ]
          EnvironmentFiles:
            - Type: s3
              Value: !Ref EnvFileS3Arn
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - FARGATE

  CronExecutionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Execute ecs task"
      Name: !Join [ "-", [ !Ref ProjectName, "execution-rule" ] ]
      ScheduleExpression: !Join [ "", [ "cron(", !Ref CronExecutionExpression, ")" ]]
      State: ENABLED
      Targets:
        - Id: !Join [ "-", [ !Ref ProjectName, "rule-target" ] ]
          Arn: !GetAtt Cluster.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            TaskCount: 1
            LaunchType: FARGATE
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                Subnets: !Ref SubnetIds
          RoleArn: !GetAtt SchedulerRole.Arn

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ProjectName, "scheduler-role" ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
      Policies:
        - PolicyName: RunTaskPolicy
          PolicyDocument:
            Statement:
              - Action: ecs:RunTask
                Effect: Allow
                Resource:
                  - !Ref TaskDefinition
                Condition:
                  ArnLike: 
                    "ecs:cluster": !GetAtt Cluster.Arn
              - Action: iam:PassRole
                Effect: Allow
                Resource: ["*"]
                Condition:
                  StringLike:
                    "iam:PassedToService": "ecs-tasks.amazonaws.com"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join [ "-", [ !Ref ProjectName, "logs" ] ]

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ProjectName, "task-role" ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ "-", [ !Ref ProjectName, "task-execution-role" ] ]
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: TaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Action: s3:GetObject
                Effect: Allow
                Resource: 
                  - !Ref EnvFileS3Arn
              - Action: s3:GetBucketLocation
                Effect: Allow
                Resource:
                  - !Select [ 0, !Split [ "/", !Ref EnvFileS3Arn ] ]

Outputs:
  RepositoryUri:
    Description: Docker image repository uri
    Value: !GetAtt ContainerRepository.RepositoryUri
